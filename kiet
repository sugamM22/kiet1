import java.io.*;
import java.util.*;
import java.security.*;
import java.math.*;
class Node{

        Node parent;
       //variable for checking the value of data of parent and child diffirence.
        public  int checkValue;
	Date timeStamp ; 
	String data;
	int nodeNumber;
	String nodeId;
	String referenceNodeId;
	String childReferenceNodeId;
	String genesisReferenceNodeId ; 
	String HashValue ;
	
	//Constructor For Creating a Non Genesis Node

	Node( Node parent ,Date timeStamp ,String data,int nodeNumber,	String nodeId,String referenceNodeId
        ,String childReferenceNodeId,String genesisReferenceNodeId )  throws Exception
	{ 
	      this.parent = parent;
     	      this.timeStamp = new Date() ; 
              int temp = Integer.parseInt(data);
              this.parent.checkValue = parent.checkValue - temp; 
              if(this.parent.checkValue>0)
		{
	         this.data = data;
                  this.checkValue = Integer.parseInt(data);
		}
		else
		{
                    this.checkValue = 0;
 		System.exit(0);
		}
		this.nodeNumber = nodeNumber;
		this.nodeId = nodeId;
		this.referenceNodeId = referenceNodeId;
		this.childReferenceNodeId = childReferenceNodeId;
		this.genesisReferenceNodeId = genesisReferenceNodeId ; 
		this.HashValue  = this.getHashValue(data);
                
             
	    
	}
	
	
	//Constructor For Creating a  Genesis Node
	Node(Date timeStamp ,String data,int nodeNumber,	String nodeId,	String referenceNodeId,
	String childReferenceNodeId,	String genesisReferenceNodeId)  throws Exception
	{ 
	        this.parent = null;
    	        this.timeStamp = timeStamp; 
	        this.data = data;
                this.checkValue = Integer.parseInt(data);
		this.nodeNumber = nodeNumber;
		this.nodeId = nodeId;
		this.referenceNodeId = referenceNodeId;
		this.childReferenceNodeId = childReferenceNodeId;
		this.genesisReferenceNodeId = genesisReferenceNodeId ; 
		this.HashValue  = this.getHashValue(data);
	    
	}
      
      // Method for fingding the Hash value on the basis of data.
        public String getHashValue(String data) throws Exception
       {
        String s=data;
        MessageDigest m = MessageDigest.getInstance("MD5");
        m.update(s.getBytes() , 0 , s.length());
        return (new BigInteger(1,m.digest()).toString(16));
       }


         
        //Driver Method 
	public static void main(String arr[])  throws Exception
	{
	    Node Gnode = new Node(new Date() , "30" , 1 , "10" , "5" , "5" , "1" );
	    System.out.println( Gnode.checkValue);
            Node Gnodebaccha = new Node(Gnode,new Date() , "17" , 1 , "10" , "5" , "5" , "1");
	    System.out.println( Gnodebaccha.checkValue);
             System.out.println( Gnodebaccha.HashValue);
           Gnode.EncryptKey();
	}
     

     public void EncryptKey()
     {
            String  encryptedKey = AES.encrypt(data, HashValue);
             String decryptedString = AES.decrypt(encryptedKey, HashValue) ;
            System.out.println(decryptedString);
    }




	
}
















import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Base64;
 
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
 
public class AES {
 
    private static SecretKeySpec secretKey;
    private static byte[] key;
 
    public static void setKey(String myKey)
    {
        MessageDigest sha = null;
        try {
            key = myKey.getBytes("UTF-8");
            sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            secretKey = new SecretKeySpec(key, "AES");
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
 
    public static String encrypt(String strToEncrypt, String secret)
    {
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
        }
        catch (Exception e)
        {
            System.out.println("Error while encrypting: " + e.toString());
        }
        return null;
    }
 
    public static String decrypt(String strToDecrypt, String secret)
    {
        try
        {
            setKey(secret);
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
        }
        catch (Exception e)
        {
            System.out.println("Error while decrypting: " + e.toString());
        }
        return null;
    }
}
